%%inline
from dataclasses import dataclass
from typing import *
@dataclass
class Term:
     v: str

@dataclass
class NonTerm:
     v: str

@dataclass
class Or:
     pass

@dataclass
class Seq:
     xs: 'List[Union[NonTerm, Term, Or]]'
     label: str
     
@dataclass
class More:
     impl: Seq


@dataclass
class Prod:
     descr: str
     name: str
     type: str
     impl : Seq

DEF = r'\bnfdef'
TYPEOF = r'\bnfistypeof'
TYPE = r'\bnftype'
OR = r'\bnfalt'
NT = r'\bnfnonterm'
SPACE = r' \bnfspace '
TERM = r'\bnfterm'
DESCR = r'\bnfdescr'
LABEL = r'\bnflabel'
MKLINE = '\\\\'

def macro_apply(macro, *args):
     res = macro
     for arg in args:
          res = f'{res}{{ {arg} }}'
     return res

xor = Term("|")
eq = Term("=")
define = Term("::=")
ann = Term("::")

def unwrap(x): return x[1:-1]

def to_latex(xs):
     from io import StringIO
     xs = iter(xs)
     lastlineno, x = next(xs)
     io = StringIO()
     print = io.write
     to_backnaur(print, x)
     for lineno, x in xs:
          print('\n')
          print((lineno - lastlineno) * MKLINE)
          to_backnaur(print, x)
          lastlineno = lineno
     return io.getvalue()

def to_backnaur(print, x):

     if isinstance(x, Prod):
          if x.descr:
               print(macro_apply(DESCR, x.descr))
               print(macro_apply(SPACE))

          print(' & ')

          to_backnaur(print, NonTerm(x.name))

          if x.type:
               print(' & ')
               print(macro_apply(TYPEOF))
               print(' & ')
               print(macro_apply(TYPE, x.type))
               print(' & ')
          else:
               print(' & & & ')
          
          print(macro_apply(DEF))
          print(' & ')

          to_backnaur(print, x.impl)
          return
     if isinstance(x, Term):
          return print(macro_apply(TERM, x.v))
     if isinstance(x, NonTerm):
          return print(macro_apply(NT,  x.v))
     if isinstance(x, Or):
          print(macro_apply(OR))
     if isinstance(x, More):
          # desc
          print(' & ')
          # name
          print(' & ')
          # typeof
          print(' & ')
          # type
          print(' & ')
          print(macro_apply(OR))
          print(' & ')
          return to_backnaur(print, x.impl)
     if isinstance(x, Seq):
          if not x.xs:
               print(' & ')
               return

          xs = iter(x.xs)
          to_backnaur(print, next(xs))
          for e in xs:
               print(macro_apply(SPACE))
               to_backnaur(print, e)
          
          print(' & ')
          if x.label:
               print(macro_apply(LABEL, x.label))
          return
%%


list[p] : p          { [ $1 ] }
        | list[p] p  { $1.append($2); $1 }
        ;

sep_list[comma, p] :
          p                     { [ $1 ] }
        | sep_list[p] comma p   { $1.append($3); $1 }
        ;



atom : <NonTerm> { NonTerm(unwrap($1.value)) }
     | <Term>    { Term($1.value) }
     | <Term2>   { Term(unwrap($1.value)) }
     | '|'       { Or() }
     | '='       { eq }
     | '::'      { ann }
     | '::='     { define }
     ;



type : '::='              { None }
     | '::' <Term> '='    { $2.value }
     | '::' <Term2> '='   { unwrap($2.value) }
     | '::' <NonTerm> '=' { unwrap($2.value) }
     ;

rule : list[atom]               { Seq($1, None)     }
     | list[atom] '%%%' <Term2> { Seq($1, $3.value) }
     ;

singleprod : <NonTerm> type rule
      { ($1.lineno, Prod(None, unwrap($1.value), $2, $3))     }
     | <Term> <NonTerm> type rule
      { ($1.lineno, Prod($1.value, unwrap($2.value), $3, $4)) }
     | <Term2> <NonTerm> type rule
      { ($1.lineno, Prod(unwrap($1.value), unwrap($2.value), $3, $4)) }
     | '|' rule
      { ($1.lineno, More($2)) }
     ;

prod : prod <NEWLINE> singleprod { $1.append($3); $1 }
     | singleprod                { [$1] }
     | prod <EOF>                { $1   }
     | prod <NEWLINE>            { $1   }
     ;

START : <BOF> <NEWLINE> prod { to_latex($3) }
      | <BOF> prod           { to_latex($2) }
      ;
